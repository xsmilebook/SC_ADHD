---
title: "S1_selectparameters"
format: html
editor: visual
author: Xiaoyu Xu
date: 1/22/2025
---

```{r}
#| label: load-packages-data
#| include: false
library(ggplot2)
library(tidyverse)
library(mgcv)
library(readxl)
library(openxlsx)
library(parallel)
library(gamlss)
library(scales)
rm(list=ls())
# set resolution
resolution <- 15

element_num <- resolution*(resolution+1)/2

# input directory
homepath <- "D:/code/SC_ADHD"

interfileFolder <- file.path(homepath, "datasets", "interfileFolder")
functionFolder <- file.path(homepath, "code", "functions")
resultFolder <- paste0(homepath, "/datasets/results/S30")
functionFolder.SCDev <- paste0(homepath, "/functionFolder.SCDev/gamfunction")
FigureFolder <- paste0(homepath, '/Figures/Yeo17')

# load data
SCdata <- readRDS(file.path(interfileFolder, "SCdata_Yeo17_CV75_sumSCinvnode.sum.msmtcsd.merge.rds"))
SCdata$sex <- as.factor(SCdata$sex)
source(paste0(functionFolder, "/Compare_distributions_gamlss.R"))

```

## Step 1 Prepare data

1)  filter TD participants, diagnosed as TD and not diagnosed as ADHD at any visit.

```{r}
#| label: Step1.1
SCdata <- SCdata %>% rename(siteID=site)
n0 = nrow(SCdata)
SCdata <- SCdata %>% mutate(WB_SCmean = rowMeans(select(.,starts_with("SC."))))
SCdata <- SCdata %>% filter(WB_SCmean>mean(WB_SCmean)-3*sd(WB_SCmean), WB_SCmean<mean(WB_SCmean)+3*sd(WB_SCmean))
n1 = nrow(SCdata)
SCdata.TD <- SCdata %>% filter(ADHD==0)



# SCdata.TD <- SCdata.TD %>% filter(WB_SCmean>mean(WB_SCmean)-3*sd(WB_SCmean), WB_SCmean<mean(WB_SCmean)+3*sd(WB_SCmean))

boxplot(SCdata.TD$WB_SCmean)
print(paste(n1, "obs included,", (n0-n1), "obs were removed due to extreme deviation of WB_SCmean."))



```

2)  separate TD set as training (70%) & test (30%) sets. This proportion is based on [Rutherford, Nature Protocol, 2023](https://www.nature.com/articles/s41596-022-00696-5)

```{r}
#| label: Step1.2
## Separate training and test dataset. 
##########################################
# First, TD dataset was separated into two subsets, one consists of subjects with only one visit, the other 
# one consists of subjects with over one visits.
# Then, stratified sampling was conducted in the two subsets separately to generate 70% training samples and 30% test samples. 
# The unique subset was stratified by sex, siteID and eventname, while the longitudinal subset was stratified by sex and siteID.
# Rutherford, Nature Protocol,2023
subject_list <- SCdata.TD %>%
  group_by(scanID) %>%
  summarise(
    siteID = first(siteID), # Get the site for each subject
    sex = first(sex)       # Get the sex for each subject
  ) %>%
  ungroup()

# Create a stratification variable
subject_list$site_sex <- paste0(subject_list$siteID, "_", subject_list$sex)

# 2. Perform stratified sampling on the subject list
set.seed(3407) # Use the same random seed for reproducibility
stratify_var <- subject_list$site_sex
split_indices <- split(1:nrow(subject_list), stratify_var)
# 按照site_sex分层抽样

# Sample 70% of subjects from each stratum for the training set
train_indices <- lapply(split_indices, function(indices) {
  sample(x = indices, size = round(length(indices) * 0.7), replace = FALSE)
})

# Combine the indices to get the list of training subjects
train_subject_indices <- unlist(train_indices)
train_subjects <- subject_list$scanID[train_subject_indices]

# 3. Create the training and test sets based on the sampled subject IDs
SCdata.TD.trainset <- SCdata.TD %>%
  filter(scanID %in% train_subjects)

SCdata.TD.testset <- SCdata.TD %>%
  filter(!(scanID %in% train_subjects))

# 4. Final cleaning and reporting (same as original code)
SCdata.TD.trainset <- SCdata.TD.trainset %>%
  group_by(siteID) %>%
  filter(n() > 30) %>%
  ungroup()


print(paste(nrow(SCdata.TD.trainset), "obs in the training set,", nrow(SCdata.TD.testset), "obs in the test set."))
print(paste("Number of unique subjects in training set:", length(unique(SCdata.TD.trainset$scanID))))
print(paste("Number of unique subjects in test set:", length(unique(SCdata.TD.testset$scanID))))
##########################################

# The rest of the code block remains the same
SCdata.TD.trainset[,c("siteID", "sex")] <- lapply(SCdata.TD.trainset[,c("siteID", "sex")], as.factor)
SCdata.TD.testset[,c("siteID", "sex")] <- lapply(SCdata.TD.testset[,c("siteID", "sex")], as.factor)

# Assuming WB_SCmean and SC.* columns are present from Step 1.1
# Ensure your element_num matches the number of SC columns
element_num <- 120 # You set this to 15*(15+1)/2 = 120 earlier, which is correct.

SCdata.TD.trainset_noNA <- SCdata.TD.trainset %>%
  drop_na(c(paste0("SC.", 1:element_num), "age", "sex", "siteID", "mean_fd"))

SCdata.TD.testset_noNA <- SCdata.TD.testset %>%
  drop_na(c(paste0("SC.", 1:element_num), "age", "sex", "siteID", "mean_fd"))

# Save the datasets
saveRDS(SCdata.TD.trainset_noNA, paste0(resultFolder, "/SCdata.TD.trainset_SCYeo", element_num, ".rds"))
saveRDS(SCdata.TD.testset_noNA, paste0(resultFolder, "/SCdata.TD.testset_SCYeo", element_num, ".rds"))

```

## Step 2 Select parameters

### 2.1 Select distribution families.

We are going to select the best distribution from 24 continuous distributions.

```{r}
#| label: Step2.1


num_cores <- detectCores() - 8
cl <- makeCluster(num_cores)
clusterExport(cl, varlist = c("functionFolder"), envir = .GlobalEnv)
invisible(clusterEvalQ(cl, {
  library(ggplot2)
  library(tidyverse)
  library(mgcv)
  library(readxl)
  library(openxlsx)
  library(parallel)
  library(gamlss)
  library(scales)
  source(paste0(functionFolder, "/Compare_distributions_gamlss.R"))
}))

## WB mean SC
dataname <- "SCdata.TD.trainset_noNA"
smoothvar <- "age"
IDvar <- "scanID"
bs.df = 3
covariates <- "sex+mean_fd"
randomvar="siteID"

dependentvar <- "WB_SCmean"
outlist.tmp <- gamlss_comparedistribution(dataname, dependentvar, smoothvar,IDvar, bs.df, covariates, randomvar, cl)
performance.tmp <- outlist.tmp$performance
performance_family <- performance.tmp
write.xlsx(performance_family, paste0(resultFolder, "/distributiontest_TD_WB_meanSC_Yeo", resolution,".xlsx"))

## All edges
if (! file.exists(paste0(resultFolder, "/distributiontest_TD_Edgelevel_Yeo", resolution,".rds"))){
  performancelist <- list()
  for (i in 1:element_num){
    dependentvar <- paste0("SC.", i)
    outlist.tmp <- gamlss_comparedistribution(dataname, dependentvar, smoothvar,IDvar, bs.df, covariates, randomvar, cl)
    performance.tmp <- outlist.tmp$performance
    performancelist[[i]] <- outlist.tmp$performance
  }
  saveRDS(performancelist, paste0(resultFolder, "/distributiontest_TD_Edgelevel_Yeo", resolution,".rds"))
}else{
  performancelist <- readRDS(paste0(resultFolder, "/distributiontest_TD_Edgelevel_Yeo", resolution,".rds"))
  
}

performance.df <- do.call(rbind, performancelist)
performance.df <- performance.df %>% group_by(dependentvar) %>%
  mutate(family = performancelist[[1]]$distribution)
performance.df <- performance.df %>% filter(converged==T) %>% group_by(family) %>% filter(n() == 120)
performance.df <- performance.df %>% group_by(dependentvar) %>%
  mutate(rankorder = rank(BIC))

performance.df.sum <- performance.df %>% group_by(family) %>% 
  summarise(meanBICR = mean(rankorder), bestnum = sum(rankorder==1))
print(paste(performance.df.sum$family[which.max(performance.df.sum$bestnum)], "is selected as it is the best family for most edges."))
## GG

# plot
# WB_meanSC
performance.WB <- read.xlsx(paste0(resultFolder, "/distributiontest_TD_WB_meanSC_Yeo", resolution,".xlsx"))
performance.tmp <- performance.WB %>% filter(converged==T)
performance.tmp$BIC <- performance.tmp$BIC - max(performance.tmp$BIC)
performance.tmp <- performance.tmp %>% filter(BIC < quantile(BIC, 0.55))
performance.tmp$distribution <- factor(performance.tmp$distribution, levels=performance.tmp$distribution[order(performance.tmp$BIC)])
ggplot(data=performance.tmp)+
  geom_bar(aes(x=distribution, y=BIC),stat="identity", fill="#B4D3E7")+
  labs(x="Distribution family", y="BIC", title = "Whole brain mean SC strength")+theme_classic()+
  theme(panel.background = element_rect(fill="white"),
        plot.background = element_rect(fill = "white",colour = NA),aspect.ratio = 0.7,
        plot.title = element_text(color = "black", size = 14, hjust = 0.5),
        axis.title = element_text(color = "black", size = 14),axis.line = element_line(linewidth = 0.4),
        axis.ticks = element_line(linewidth = 0.4),
        axis.text.y = element_text(color = "black",size = 14),
        axis.text.x = element_text(color = "black",angle = 45, hjust = 1, size = 14),
        legend.position = "none")
ggsave(paste0(FigureFolder, "/Selectparameter/distribution_WBmeanSC.tiff"), width=12, height=10, units = "cm")
ggsave(paste0(FigureFolder, "/Selectparameter/distribution_WBmeanSC.svg"), width=12, height=10, units = "cm")

# All edges
performance.df.sum$family <- factor(performance.df.sum$family, levels = performance.df.sum$family[order(performance.df.sum$bestnum, decreasing = T)])
ggplot(data=performance.df.sum)+
  geom_bar(aes(x=family, y=bestnum),stat="identity", fill="#B4D3E7")+
  labs(x="Distribution family", y="Frequency")+theme_classic()+
  theme(panel.background = element_rect(fill="white"),
        plot.background = element_rect(fill = "white",colour = NA),aspect.ratio = 0.7,
        plot.title = element_text(color = "black", size = 14, hjust = 0.5),
        axis.title = element_text(color = "black", size = 14),axis.line = element_line(linewidth = 0.4),
        axis.ticks = element_line(linewidth = 0.4),
        axis.text.y = element_text(color = "black",size = 14),
        axis.text.x = element_text(color = "black",angle = 45, hjust = 1, size = 14),
        legend.position = "none")

ggsave(paste0(FigureFolder, "/Selectparameter/distribution_AlledgesSC.tiff"), width=12, height=10, units = "cm")
ggsave(paste0(FigureFolder, "/Selectparameter/distribution_AlledgesSC.svg"), width=12, height=10, units = "cm")

```

### 2.2 Select degree of freedom

we are going to select the best degree of freedom from 2 to 6.

```         
```

```{r}
#| label: Step2.2
source(paste0(functionFolder, "/Compare_distributions_gamlss.R"))
bs.df.set <- matrix(c(3,3,3,
                   3,4,3,
                   3,5,3,
                   3,6,3,
                   4,3,3,
                   4,4,3,
                   4,5,3,
                   4,6,3,
                   5,3,3,
                   5,4,3,
                   5,5,3,
                   5,6,3,
                   6,3,3,
                   6,4,3,
                   6,5,3,
                   6,6,3,
                   2,2,2,
                   2,3,2,
                   2,4,2,
                   2,5,2,
                   2,6,2,
                   3,2,2,
                   3,3,2,
                   3,4,2,
                   3,5,2,
                   3,6,2,
                   4,2,2,
                   4,3,2,
                   4,4,2,
                   4,5,2,
                   4,6,2,
                   5,2,2,
                   5,3,2,
                   5,4,2,
                   5,5,2,
                   5,6,2,
                   6,2,2,
                   6,3,2,
                   6,4,2,
                   6,5,2,
                   6,6,2),
                 byrow=TRUE,ncol=3,dimnames=list(NULL,c("mu","sigma", "degree")))

## WB mean SC
dataname <- "SCdata.TD.trainset_noNA"
smoothvar <- "age"
IDvar <- "scanID" 
covariates <-  "sex+mean_fd"
distribution.fam <- "SHASH"
randomvar <- "siteID"

dependentvar <- "WB_SCmean"
outlist.tmp <- gamlss_compare.bs.df(dataname, dependentvar, smoothvar, IDvar, bs.df.set, covariates, distribution.fam, randomvar, cl)
performance.tmp <- outlist.tmp$performance
performance_df <- performance.tmp
model_df <- outlist.tmp[[1]]
write.xlsx(performance_df, paste0(resultFolder, "/dftest_TD_WB_meanSC_Yeo", resolution,".xlsx"))
saveRDS(model_df, paste0(resultFolder, "/model_dftest_Yeo", resolution,".rds"))
# "The best distibution for WB_SCmean is mu.df = 2, sigma.df = 2, degree = 2.

## All edges
dataname <- "SCdata.TD.trainset"

smoothvar <- "age"
IDvar <- "scanID" 
covariates <-  "sex+mean_fd"
distribution.fam <- "JSU"
randomvar <- "siteID"

if (! file.exists(paste0(resultFolder, "/dftest_TD_Edgelevel_Yeo", resolution,".rds"))){
  performancelist <- list()
  for (i in 1:element_num){
    cat(paste("\n--- Now processing i =", i, ", dependentvar =", paste0("SC.", i), "---\n"))
    dependentvar <- paste0("SC.", i)
    
    
    outlist.tmp <- tryCatch({
      gamlss_compare.bs.df(dataname, dependentvar, smoothvar, IDvar, bs.df.set, covariates, distribution.fam, randomvar, cl)
    }, error = function(e) {
    
    cat("\n!!! AN ERROR OCCURRED at i =", i, "!!!\n")
    print("Error message:")
    print(e) 
    return(list(status = "FAILED", error_message = e$message)) # 
    
  })
    performance.tmp <- outlist.tmp$performance
    performancelist[[i]] <- outlist.tmp$performance
  }
  saveRDS(performancelist, paste0(resultFolder, "/dftest_TD_Edgelevel_Yeo", resolution,".rds"))
}else{
  performancelist <- readRDS(paste0(resultFolder, "/dftest_TD_Edgelevel_Yeo", resolution,".rds"))
  
}



performance.df <- do.call(rbind, performancelist)
performance.df <- performance.df %>% group_by(dependentvar) %>%
  mutate(dfset = paste0("mu", performancelist[[1]]$mu.df, "_sigma", performancelist[[1]]$sigma.df, "_degree",  performancelist[[1]]$degree))
performance.df <- performance.df %>% filter(converged==TRUE) %>% group_by(dfset) %>% filter(n() == 120)

performance.df <- performance.df %>% group_by(dependentvar) %>%
  mutate(rankorder = rank(BIC))

performance.df.sum <- performance.df %>% group_by(dfset) %>% 
  summarise(meanBICR = mean(rankorder), bestnum = sum(rankorder==1))
print(paste(performance.df.sum$dfset[which.max(performance.df.sum$bestnum)], "is selected as it is the best family for most edges."))
# "mu2_sigma2_degree2 is selected as it is the best family for most edges."

# plot
# WB_meanSC
performance.WB <- read.xlsx(paste0(resultFolder, "/dftest_TD_WB_meanSC_Yeo", resolution,".xlsx"))
performance.tmp <- performance.WB %>% filter(converged==T)
performance.tmp$BIC <- performance.tmp$BIC - max(performance.tmp$BIC)
performance.tmp <- performance.tmp %>% filter(BIC < quantile(BIC, 0.25))
performance.tmp$dfset <- paste0("mu", performance.tmp$mu.df, "_sigma", performance.tmp$sigma.df, "_degree", performance.tmp$degree)
performance.tmp$dfset <- factor(performance.tmp$dfset, levels=performance.tmp$dfset[order(performance.tmp$BIC)])
ggplot(data=performance.tmp)+
  geom_bar(aes(x=dfset, y=BIC),stat="identity", fill="#B4D3E7")+
  labs(x="Degree of freedom", y="BIC", title = "Whole brain mean SC strength")+theme_classic()+
  theme(panel.background = element_rect(fill="white"),
        plot.background = element_rect(fill = "white",colour = NA),aspect.ratio = 0.5,
        plot.title = element_text(color = "black", size = 12, hjust = 0.5),
        axis.title = element_text(color = "black", size = 12),axis.line = element_line(linewidth = 0.4),
        axis.ticks = element_line(linewidth = 0.4),
        axis.text.y = element_text(color = "black",size = 12),
        axis.text.x = element_text(color = "black",angle = 45, hjust = 1, size = 14),
        legend.position = "none")
ggsave(paste0(FigureFolder, "/Selectparameter/dfset_WBmeanSC.tiff"), width=30, height=18, units = "cm")
ggsave(paste0(FigureFolder, "/Selectparameter/dfset_WBmeanSC.svg"), width=30, height=18, units = "cm")

# All edges
performance.df.sum$dfset <- factor(performance.df.sum$dfset, levels = performance.df.sum$dfset[order(performance.df.sum$bestnum, decreasing = T)])
performance.df.sum <- performance.df.sum %>% filter(dfset %in% levels(performance.df.sum$dfset)[1:10])

ggplot(data=performance.df.sum)+
  geom_bar(aes(x=dfset, y=bestnum),stat="identity", fill="#B4D3E7")+
  labs(x="Degree of freedom", y="Frequency")+theme_classic()+
  theme(panel.background = element_rect(fill="white"),
        plot.background = element_rect(fill = "white",colour = NA),aspect.ratio = 0.7,
        plot.title = element_text(color = "black", size = 14, hjust = 0.5),
        axis.title = element_text(color = "black", size = 14),axis.line = element_line(linewidth = 0.4),
        axis.ticks = element_line(linewidth = 0.4),
        axis.text.y = element_text(color = "black",size = 14),
        axis.text.x = element_text(color = "black",angle = 45, hjust = 1, size = 14),
        legend.position = "none")

ggsave(paste0(FigureFolder, "/Selectparameter/dfset_AlledgesSC.tiff"), width=12, height=10, units = "cm")
ggsave(paste0(FigureFolder, "/Selectparameter/dfset_AlledgesSC.svg"), width=12, height=10, units = "cm")


```
